package janelas;

import java.io.IOException;
import java.net.Inet4Address;
import java.net.InetAddress;
import java.net.NetworkInterface;
import java.net.SocketException;
import java.net.URL;
import java.util.Enumeration;
import java.util.ResourceBundle;

import javafx.event.ActionEvent;
import javafx.event.EventHandler;
import javafx.fxml.FXML;
import javafx.fxml.FXMLLoader;
import javafx.fxml.Initializable;
import javafx.scene.Parent;
import javafx.scene.Scene;
import javafx.scene.control.Button;
import javafx.scene.control.Label;
import javafx.stage.Stage;
import jogodaForcaESM.JogoDaForcaESM;
import servidor.Servidor;

public class ControladorSala implements Initializable {

	@FXML private Button iniciar_jogo;
	@FXML private Label sala;
	@FXML private Label ip;
	
	final Servidor server;

	//Implementado para parametrizar controlador para servidor em sua criação

	public ControladorSala() throws IOException{
		server = new Servidor(this);
	}
	
	
	@Override
	public void initialize(URL location, ResourceBundle resources) {
		
		//implemmentação da abertura do servidor
		Thread iniciarServidor = new Thread ((Runnable) server);
		iniciarServidor.start();
		//iniciar_jogo.setDisable(true);
		
		//mostrar IP para usuários
		ip.setText(IP());
		
		iniciar_jogo.setOnAction(new EventHandler<ActionEvent>() {
			
			@Override
			public void handle(ActionEvent event) {
				Stage stage = (Stage) iniciar_jogo.getScene().getWindow(); 
				Parent root;
				try{
					//impede entrada de novos jogadores
					server.barrarEntrada();
					
					//loader implementado para parametrizar controlador para JogoDaForcaESM
					FXMLLoader fxmlLoader = new FXMLLoader();
					root = fxmlLoader.load(getClass().getResource("fxml_jogo.fxml"));
					Scene scene = new Scene(root);
					stage.setScene(scene);
					stage.show();
					
					JogoDaForcaESM novo_jogo = new JogoDaForcaESM(server, (ControladorJogo)fxmlLoader.getController());
					novo_jogo.run();
				}catch (IOException e){
					
				}

			}
		});
	}
	
	//escreve entrada do jogador na sala
	public void entrarJogador (String nome, String ip){
		sala.setText(sala.getText() + "\n" + nome + ": " + "<" + ip + ">");		
	}
	
	//limpa entrada do jogador da sala
	public void sairJogador(String nome, String ip){
		String texto = sala.getText();
		String limpar = "\n" + nome + ": " + "<" + ip + ">";
		texto = texto.replace (limpar, "");
		sala.setText(texto);
	}
	
	//obter IP LAN do servidor
	 private String IP()
	    {
	        String IP_address = "";
	        int count = 0 ;
	        try{
	            Enumeration<NetworkInterface> interfaces = NetworkInterface.getNetworkInterfaces();
	            while (interfaces.hasMoreElements())
	            {
	                NetworkInterface current = interfaces.nextElement();
	              //  System.out.println(current);
	                if (!current.isUp() || current.isLoopback() || current.isVirtual()) continue;
	                Enumeration<InetAddress> addresses = current.getInetAddresses();
	                while (addresses.hasMoreElements()){
	                    InetAddress current_addr = addresses.nextElement();
	                    if (current_addr.isLoopbackAddress()) continue;
	                    if (current_addr instanceof Inet4Address &&  count == 0)
	                    {
	                        IP_address = current_addr.getHostAddress() ; 
	                        //System.out.println(current_addr.getHostAddress());
	                         count++;
	                        break;
	                    }
	                }
	            }
	        }
	        catch(SocketException SE)
	        {
	            SE.printStackTrace();
	        } 
	        return  IP_address;
	    }

	public void ativarIniciar() {
		iniciar_jogo.setDisable(false);		
	}
	
}
