package servidor;

import java.io.DataInputStream;
import java.io.IOException;
import java.net.BindException;
import java.net.ServerSocket;
import java.net.Socket;
import java.util.ArrayList;

import janelas.ControladorSala;
import janelas.Temporizador;
import javafx.application.Platform;


public class Servidor implements Runnable {
	
	ServerSocket servidor;
	ArrayList <Jogador> jogadores = new ArrayList<>(); 
	Socket novo_jogador;
	String nome_jogador;
	Temporizador temporizador;
	boolean aberta = true;
	ControladorSala c;
	
	public Servidor (ControladorSala c) throws IOException {
		try{
			servidor = new ServerSocket(12345);
		}catch (BindException e){
			Platform.exit();
			System.exit(0);
		}
		
		System.out.println("Porta 12345 aberta!");
		
		temporizador = new Temporizador(c);
	
	}
	 
	public int getNJogador(){
		return jogadores.size();
	}
	
	public String getNome_jogador() {
		return nome_jogador;
	}
	
	public String getIp(){
		return novo_jogador.getInetAddress().getHostAddress();
	}


	public Temporizador getTemporizador() {
		return temporizador;
	}


	public void barrarEntrada() {
		aberta = false;		
	}


	public Jogador getJogador(int nJogador) {
		return jogadores.get(nJogador);
	}

	@Override
	public void run() {
		
		while (aberta){
			
			try {
				novo_jogador = servidor.accept();
				nome_jogador = new DataInputStream(novo_jogador.getInputStream()).readUTF();

			} catch (IOException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}	
			
			
			if (novo_jogador != null){
		
				jogadores.add(new Jogador (novo_jogador, nome_jogador, temporizador));
				novo_jogador = null;
			}
			
			if (jogadores.size() >= 3) c.ativarIniciar();
		}
		
		
	}

}